version: '3.9'

services:

  postgres:
    image: postgres:14.5-alpine
    restart: always
    env_file:
     - src/.env
    volumes:
      - pg_data_todolist:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U oleg -d todolist
      interval: 5s
      timeout: 3s
      retries: 3
    ports:
      - "5432:5432"
    networks:
      - backend_nw

  api:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - src/.env
    environment:
      POSTGRES_HOST: postgres
    depends_on:
      postgres:
        condition: service_healthy
    command: python3 manage.py runserver 0.0.0.0:8000
    ports:
      - "8000:8000"
    healthcheck:
      test: curl -sS http://127.0.0.1:8000/ping/ || exit 1
      interval: 3s
      timeout: 3s
      retries: 3
    networks:
      - backend_nw
      - frontend_nw
    volumes:
      - ./src/:/opt/todolist

  frontend:
    image: sermalenk/skypro-front:lesson-35
    restart: always
    ports:
      - "80:80"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - frontend_nw
    volumes:
      - ./deploy/nginx/default.conf:/etc/nginx/conf.d/default.conf

volumes:
  pg_data_todolist:

networks:
  backend_nw:
    driver: bridge
  frontend_nw:
    driver: bridge
